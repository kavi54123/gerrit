{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE NoGeneralisedNewtypeDeriving #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.UserGroup where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data GroupDefinition = GroupDefinition
  { groupDefinitionName ::
      Hs.Text,
    groupDefinitionMembers :: Hs.Word32
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GroupDefinition where
  nameOf _ = (Hs.fromString "GroupDefinition")

instance HsProtobuf.HasDefault GroupDefinition

instance HsProtobuf.Message GroupDefinition where
  encodeMessage
    _
    GroupDefinition
      { groupDefinitionName = groupDefinitionName,
        groupDefinitionMembers = groupDefinitionMembers
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                groupDefinitionName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                groupDefinitionMembers
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GroupDefinition)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.UInt32)
          (HsProtobuf.Single "members")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GroupDefinition where
  toJSONPB (GroupDefinition f1 f2) =
    (HsJSONPB.object ["name" .= f1, "members" .= f2])
  toEncodingPB (GroupDefinition f1 f2) =
    (HsJSONPB.pairs ["name" .= f1, "members" .= f2])

instance HsJSONPB.FromJSONPB GroupDefinition where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GroupDefinition"
        ( \obj ->
            (Hs.pure GroupDefinition) <*> obj .: "name" <*> obj .: "members"
        )
    )

instance HsJSONPB.ToJSON GroupDefinition where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GroupDefinition where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GroupDefinition where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      groupDefinitionName <- declare_name Proxy.Proxy
      let declare_members = HsJSONPB.declareSchemaRef
      groupDefinitionMembers <- declare_members Proxy.Proxy
      let _ =
            Hs.pure GroupDefinition <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_members
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GroupDefinition",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("name", groupDefinitionName),
                          ("members", groupDefinitionMembers)
                        ]
                  }
            }
        )

newtype ListRequest = ListRequest {listRequestIndex :: Hs.Text}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ListRequest where
  nameOf _ = (Hs.fromString "ListRequest")

instance HsProtobuf.HasDefault ListRequest

instance HsProtobuf.Message ListRequest where
  encodeMessage _ ListRequest {listRequestIndex = listRequestIndex} =
    ( Hs.mconcat
        [ ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              listRequestIndex
          )
        ]
    )
  decodeMessage _ =
    (Hs.pure ListRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ListRequest where
  toJSONPB (ListRequest f1) = (HsJSONPB.object ["index" .= f1])
  toEncodingPB (ListRequest f1) = (HsJSONPB.pairs ["index" .= f1])

instance HsJSONPB.FromJSONPB ListRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ListRequest"
        (\obj -> (Hs.pure ListRequest) <*> obj .: "index")
    )

instance HsJSONPB.ToJSON ListRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ListRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ListRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      listRequestIndex <- declare_index Proxy.Proxy
      let _ = Hs.pure ListRequest <*> HsJSONPB.asProxy declare_index
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ListRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("index", listRequestIndex)]
                  }
            }
        )

newtype ListResponse = ListResponse
  { listResponseItems ::
      Hs.Vector Monocle.UserGroup.GroupDefinition
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ListResponse where
  nameOf _ = (Hs.fromString "ListResponse")

instance HsProtobuf.HasDefault ListResponse

instance HsProtobuf.Message ListResponse where
  encodeMessage _ ListResponse {listResponseItems = listResponseItems} =
    ( Hs.mconcat
        [ ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              ( Hs.coerce @(Hs.Vector Monocle.UserGroup.GroupDefinition)
                  @(HsProtobuf.NestedVec Monocle.UserGroup.GroupDefinition)
                  listResponseItems
              )
          )
        ]
    )
  decodeMessage _ =
    (Hs.pure ListResponse)
      <*> ( Hs.coerce
              @(_ (HsProtobuf.NestedVec Monocle.UserGroup.GroupDefinition))
              @(_ (Hs.Vector Monocle.UserGroup.GroupDefinition))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "GroupDefinition"))
          )
          (HsProtobuf.Single "items")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ListResponse where
  toJSONPB (ListResponse f1) = (HsJSONPB.object ["items" .= f1])
  toEncodingPB (ListResponse f1) = (HsJSONPB.pairs ["items" .= f1])

instance HsJSONPB.FromJSONPB ListResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ListResponse"
        (\obj -> (Hs.pure ListResponse) <*> obj .: "items")
    )

instance HsJSONPB.ToJSON ListResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ListResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ListResponse where
  declareNamedSchema _ =
    do
      let declare_items = HsJSONPB.declareSchemaRef
      listResponseItems <- declare_items Proxy.Proxy
      let _ = Hs.pure ListResponse <*> HsJSONPB.asProxy declare_items
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ListResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("items", listResponseItems)]
                  }
            }
        )

data ReviewHisto = ReviewHisto
  { reviewHistoDate :: Hs.Word64,
    reviewHistoCount :: Hs.Word32
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ReviewHisto where
  nameOf _ = (Hs.fromString "ReviewHisto")

instance HsProtobuf.HasDefault ReviewHisto

instance HsProtobuf.Message ReviewHisto where
  encodeMessage
    _
    ReviewHisto
      { reviewHistoDate = reviewHistoDate,
        reviewHistoCount = reviewHistoCount
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                reviewHistoDate
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                reviewHistoCount
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure ReviewHisto)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.UInt64)
          (HsProtobuf.Single "date")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.UInt32)
          (HsProtobuf.Single "count")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ReviewHisto where
  toJSONPB (ReviewHisto f1 f2) =
    (HsJSONPB.object ["date" .= f1, "count" .= f2])
  toEncodingPB (ReviewHisto f1 f2) =
    (HsJSONPB.pairs ["date" .= f1, "count" .= f2])

instance HsJSONPB.FromJSONPB ReviewHisto where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ReviewHisto"
        ( \obj ->
            (Hs.pure ReviewHisto) <*> obj .: "date" <*> obj .: "count"
        )
    )

instance HsJSONPB.ToJSON ReviewHisto where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ReviewHisto where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ReviewHisto where
  declareNamedSchema _ =
    do
      let declare_date = HsJSONPB.declareSchemaRef
      reviewHistoDate <- declare_date Proxy.Proxy
      let declare_count = HsJSONPB.declareSchemaRef
      reviewHistoCount <- declare_count Proxy.Proxy
      let _ =
            Hs.pure ReviewHisto <*> HsJSONPB.asProxy declare_date
              <*> HsJSONPB.asProxy declare_count
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ReviewHisto",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("date", reviewHistoDate),
                          ("count", reviewHistoCount)
                        ]
                  }
            }
        )

data GroupStat = GroupStat
  { groupStatChangeReviewRatio :: Hs.Float,
    groupStatAuthorReviewRatio :: Hs.Float,
    groupStatCommitHisto :: Hs.Vector Monocle.UserGroup.ReviewHisto,
    groupStatReviewHisto :: Hs.Vector Monocle.UserGroup.ReviewHisto
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GroupStat where
  nameOf _ = (Hs.fromString "GroupStat")

instance HsProtobuf.HasDefault GroupStat

instance HsProtobuf.Message GroupStat where
  encodeMessage
    _
    GroupStat
      { groupStatChangeReviewRatio = groupStatChangeReviewRatio,
        groupStatAuthorReviewRatio = groupStatAuthorReviewRatio,
        groupStatCommitHisto = groupStatCommitHisto,
        groupStatReviewHisto = groupStatReviewHisto
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                groupStatChangeReviewRatio
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                groupStatAuthorReviewRatio
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( Hs.coerce @(Hs.Vector Monocle.UserGroup.ReviewHisto)
                    @(HsProtobuf.NestedVec Monocle.UserGroup.ReviewHisto)
                    groupStatCommitHisto
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                ( Hs.coerce @(Hs.Vector Monocle.UserGroup.ReviewHisto)
                    @(HsProtobuf.NestedVec Monocle.UserGroup.ReviewHisto)
                    groupStatReviewHisto
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GroupStat)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( Hs.coerce
              @(_ (HsProtobuf.NestedVec Monocle.UserGroup.ReviewHisto))
              @(_ (Hs.Vector Monocle.UserGroup.ReviewHisto))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
      <*> ( Hs.coerce
              @(_ (HsProtobuf.NestedVec Monocle.UserGroup.ReviewHisto))
              @(_ (Hs.Vector Monocle.UserGroup.ReviewHisto))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 4)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.Float)
          (HsProtobuf.Single "change_review_ratio")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.Float)
          (HsProtobuf.Single "author_review_ratio")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "ReviewHisto"))
          )
          (HsProtobuf.Single "commit_histo")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "ReviewHisto"))
          )
          (HsProtobuf.Single "review_histo")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GroupStat where
  toJSONPB (GroupStat f1 f2 f3 f4) =
    ( HsJSONPB.object
        [ "change_review_ratio" .= f1,
          "author_review_ratio" .= f2,
          "commit_histo" .= f3,
          "review_histo" .= f4
        ]
    )
  toEncodingPB (GroupStat f1 f2 f3 f4) =
    ( HsJSONPB.pairs
        [ "change_review_ratio" .= f1,
          "author_review_ratio" .= f2,
          "commit_histo" .= f3,
          "review_histo" .= f4
        ]
    )

instance HsJSONPB.FromJSONPB GroupStat where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GroupStat"
        ( \obj ->
            (Hs.pure GroupStat) <*> obj .: "change_review_ratio"
              <*> obj .: "author_review_ratio"
              <*> obj .: "commit_histo"
              <*> obj .: "review_histo"
        )
    )

instance HsJSONPB.ToJSON GroupStat where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GroupStat where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GroupStat where
  declareNamedSchema _ =
    do
      let declare_change_review_ratio = HsJSONPB.declareSchemaRef
      groupStatChangeReviewRatio <-
        declare_change_review_ratio
          Proxy.Proxy
      let declare_author_review_ratio = HsJSONPB.declareSchemaRef
      groupStatAuthorReviewRatio <-
        declare_author_review_ratio
          Proxy.Proxy
      let declare_commit_histo = HsJSONPB.declareSchemaRef
      groupStatCommitHisto <- declare_commit_histo Proxy.Proxy
      let declare_review_histo = HsJSONPB.declareSchemaRef
      groupStatReviewHisto <- declare_review_histo Proxy.Proxy
      let _ =
            Hs.pure GroupStat
              <*> HsJSONPB.asProxy declare_change_review_ratio
              <*> HsJSONPB.asProxy declare_author_review_ratio
              <*> HsJSONPB.asProxy declare_commit_histo
              <*> HsJSONPB.asProxy declare_review_histo
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GroupStat",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "change_review_ratio",
                            groupStatChangeReviewRatio
                          ),
                          ( "author_review_ratio",
                            groupStatAuthorReviewRatio
                          ),
                          ("commit_histo", groupStatCommitHisto),
                          ("review_histo", groupStatReviewHisto)
                        ]
                  }
            }
        )

data UserStat = UserStat
  { userStatName :: Hs.Text,
    userStatStat :: Hs.Maybe Monocle.UserGroup.GroupStat
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named UserStat where
  nameOf _ = (Hs.fromString "UserStat")

instance HsProtobuf.HasDefault UserStat

instance HsProtobuf.Message UserStat where
  encodeMessage
    _
    UserStat {userStatName = userStatName, userStatStat = userStatStat} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                userStatName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( Hs.coerce @(Hs.Maybe Monocle.UserGroup.GroupStat)
                    @(HsProtobuf.Nested Monocle.UserGroup.GroupStat)
                    userStatStat
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure UserStat)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.Nested Monocle.UserGroup.GroupStat))
              @(_ (Hs.Maybe Monocle.UserGroup.GroupStat))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          ( HsProtobuf.Prim
              (HsProtobuf.Named (HsProtobuf.Single "GroupStat"))
          )
          (HsProtobuf.Single "stat")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB UserStat where
  toJSONPB (UserStat f1 f2) =
    (HsJSONPB.object ["name" .= f1, "stat" .= f2])
  toEncodingPB (UserStat f1 f2) =
    (HsJSONPB.pairs ["name" .= f1, "stat" .= f2])

instance HsJSONPB.FromJSONPB UserStat where
  parseJSONPB =
    ( HsJSONPB.withObject
        "UserStat"
        (\obj -> (Hs.pure UserStat) <*> obj .: "name" <*> obj .: "stat")
    )

instance HsJSONPB.ToJSON UserStat where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON UserStat where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema UserStat where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      userStatName <- declare_name Proxy.Proxy
      let declare_stat = HsJSONPB.declareSchemaRef
      userStatStat <- declare_stat Proxy.Proxy
      let _ =
            Hs.pure UserStat <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_stat
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "UserStat",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("name", userStatName),
                          ("stat", userStatStat)
                        ]
                  }
            }
        )

data GetRequest = GetRequest
  { getRequestIndex :: Hs.Text,
    getRequestName :: Hs.Text,
    getRequestQuery :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetRequest where
  nameOf _ = (Hs.fromString "GetRequest")

instance HsProtobuf.HasDefault GetRequest

instance HsProtobuf.Message GetRequest where
  encodeMessage
    _
    GetRequest
      { getRequestIndex = getRequestIndex,
        getRequestName = getRequestName,
        getRequestQuery = getRequestQuery
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                getRequestIndex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                getRequestName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                getRequestQuery
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "query")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetRequest where
  toJSONPB (GetRequest f1 f2 f3) =
    (HsJSONPB.object ["index" .= f1, "name" .= f2, "query" .= f3])
  toEncodingPB (GetRequest f1 f2 f3) =
    (HsJSONPB.pairs ["index" .= f1, "name" .= f2, "query" .= f3])

instance HsJSONPB.FromJSONPB GetRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetRequest"
        ( \obj ->
            (Hs.pure GetRequest) <*> obj .: "index" <*> obj .: "name"
              <*> obj .: "query"
        )
    )

instance HsJSONPB.ToJSON GetRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      getRequestIndex <- declare_index Proxy.Proxy
      let declare_name = HsJSONPB.declareSchemaRef
      getRequestName <- declare_name Proxy.Proxy
      let declare_query = HsJSONPB.declareSchemaRef
      getRequestQuery <- declare_query Proxy.Proxy
      let _ =
            Hs.pure GetRequest <*> HsJSONPB.asProxy declare_index
              <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_query
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("index", getRequestIndex),
                          ("name", getRequestName),
                          ("query", getRequestQuery)
                        ]
                  }
            }
        )

data GetResponse = GetResponse
  { getResponseAll ::
      Hs.Maybe Monocle.UserGroup.GroupStat,
    getResponseUsers :: Hs.Vector Monocle.UserGroup.UserStat
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetResponse where
  nameOf _ = (Hs.fromString "GetResponse")

instance HsProtobuf.HasDefault GetResponse

instance HsProtobuf.Message GetResponse where
  encodeMessage
    _
    GetResponse
      { getResponseAll = getResponseAll,
        getResponseUsers = getResponseUsers
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Maybe Monocle.UserGroup.GroupStat)
                    @(HsProtobuf.Nested Monocle.UserGroup.GroupStat)
                    getResponseAll
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( Hs.coerce @(Hs.Vector Monocle.UserGroup.UserStat)
                    @(HsProtobuf.NestedVec Monocle.UserGroup.UserStat)
                    getResponseUsers
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetResponse)
      <*> ( Hs.coerce @(_ (HsProtobuf.Nested Monocle.UserGroup.GroupStat))
              @(_ (Hs.Maybe Monocle.UserGroup.GroupStat))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.NestedVec Monocle.UserGroup.UserStat))
              @(_ (Hs.Vector Monocle.UserGroup.UserStat))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Prim
              (HsProtobuf.Named (HsProtobuf.Single "GroupStat"))
          )
          (HsProtobuf.Single "all")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "UserStat"))
          )
          (HsProtobuf.Single "users")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetResponse where
  toJSONPB (GetResponse f1 f2) =
    (HsJSONPB.object ["all" .= f1, "users" .= f2])
  toEncodingPB (GetResponse f1 f2) =
    (HsJSONPB.pairs ["all" .= f1, "users" .= f2])

instance HsJSONPB.FromJSONPB GetResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetResponse"
        ( \obj ->
            (Hs.pure GetResponse) <*> obj .: "all" <*> obj .: "users"
        )
    )

instance HsJSONPB.ToJSON GetResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetResponse where
  declareNamedSchema _ =
    do
      let declare_all = HsJSONPB.declareSchemaRef
      getResponseAll <- declare_all Proxy.Proxy
      let declare_users = HsJSONPB.declareSchemaRef
      getResponseUsers <- declare_users Proxy.Proxy
      let _ =
            Hs.pure GetResponse <*> HsJSONPB.asProxy declare_all
              <*> HsJSONPB.asProxy declare_users
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("all", getResponseAll),
                          ("users", getResponseUsers)
                        ]
                  }
            }
        )
